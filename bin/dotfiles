#!/bin/zsh

autoload colors; colors

source $HOME/.dotfiles/zsh/common.zsh

export HOMEBREW_AUTO_UPDATE_SECS=300

INSTALL=0
GROUP=""

if [[ $OSTYPE == linux* ]]; then
    export HOMEBREW_BASE=/home/linuxbrew/.linuxbrew
else
    export HOMEBREW_BASE=/opt/homebrew
fi

path=($HOMEBREW_BASE/bin $path)
BREW=$HOMEBREW_BASE/bin/brew

setopt null_glob

# Log output
function log {
    local msg=$1
    local color=${2:-$fg_bold[green]}
    echo "$color>>>$reset_color $msg"
}

# Log output
function logSub {
    log $1 $fg_bold[blue]
}

# Log error output
function err {
    log $1 $fg_bold[red]
}

# Log warning output
function warn {
    log $1 $fg_bold[yellow]
}

# Get a file owner
function owner {
    if [[ $OSTYPE == darwin* ]]; then
        return $(stat -f '%Su' $1)
    fi
    return $(stat -c '%U' $1)
}

# Create a directory
function makedir {
    if [[ ! -d $1 ]]; then
        mkdir -p $1
        logSub "Created $1/"
    fi
}

# Create a symlink
function link {
    if [[ ! -r $2 ]]; then
        ln -s $1 $2
        logSub "Linked $1 -> $2"
    fi
}

# Sed
function sedInPlace {
    if [[ $OSTYPE == darwin* ]]; then
        sed -i "" $@
    else
        sed -i"" $@
    fi
}

# Fix terminal config
function fixterm {
    terms=()
    if (( $+commands[toe] )); then
        terms=($(toe -a | cut -f1 | sort))
    fi

    if (( ! $terms[(I)wezterm] )); then
        local tmpfile=$(mktemp /tmp/dotfiles.XXXXXX)
        curl --silent -o $tmpfile https://raw.githubusercontent.com/wez/wezterm/master/termwiz/data/wezterm.terminfo
        tic -x -o $HOME/.terminfo $tmpfile &> /dev/null
        rm $tmpfile
        logSub "Installed wezterm terminfo"
    fi

    # Fix terminal definition so C-H works properly in neovim
    kbs=$(infocmp | grep -o 'kbs=[^,]\+')
    if [[ $kbs =~ "kbs=^[hH]" ]]; then
        infocmp $TERM | sed 's/kbs=^[hH]/kbs=\\177/' > /tmp/$TERM.ti
        tic /tmp/$TERM.ti
        rm /tmp/$TERM.ti
        logSub "Fixed backspace code in terminfo"
    fi
}

# Rebuild bat cache
function dotfiles-bat {
    if (( ! $+commands[bat] )); then
        if [[ $INSTALL == 0 ]]; then
            warn "Bat not installed"
            return
        fi

        brew install bat
    fi

    log "Rebuilding bat cache..."
    local out=$(bat cache --build 2>&1)
    if (( $? )); then
        err "Error rebuilding bat cache"
        err $out
    fi
}

# Setup the fish shell prompt
function dotfiles-fish {
    if (( ! $+commands[fish] )); then
        if [[ $INSTALL == 0 ]]; then
            warn "Fish not installed"
            return
        fi

        if [[ $OSTYPE == linux* ]] && (( $+commands[apt] )); then
            echo 'deb http://download.opensuse.org/repositories/shells:/fish:/release:/3/Debian_12/ /' | sudo tee /etc/apt/sources.list.d/shells:fish:release:3.list
            curl -fsSL https://download.opensuse.org/repositories/shells:fish:release:3/Debian_12/Release.key | gpg --dearmor | sudo tee /etc/apt/trusted.gpg.d/shells_fish_release_3.gpg > /dev/null
            sudo apt update
            sudo apt install fish
        elif [[ $OSTYPE == darwin* ]] && (( $+commands[brew] )); then
            brew install fish
        else
            err "Unable to install fish"
            return
        fi
    fi

    log "Updating fish config..."
    UV_VENV_CLEAR=1 fish -c configure
}

# Link dotfiles into $HOME, update terminfo
function dotfiles-home {
    log "Updating home directory files..."

    # Remove broken links
    for f in $HOME/.*(@) $XDG_CONFIG_HOME/*(@); do
        if [[ ! -e $f ]]; then
            rm $f
            logSub "Removed $f"
        fi
    done

    for f in $DOTFILES/home/*(.); do
        link $f $HOME/.$f:t
    done

    makedir $XDG_CONFIG_HOME

    for f in $DOTFILES/config/*; do
        if [[ -d $XDG_CONFIG_HOME/$f:t ]] && [[ ! -L $XDG_CONFIG_HOME/$f:t ]]; then
            mkdir -p $XDG_CONFIG_HOME/local
            mv $XDG_CONFIG_HOME/$f:t $XDG_CONFIG_HOME/local/$f:t
            logSub "Moved $XDG_CONFIG_HOME/$f:t -> $XDG_CONFIG_HOME/local/$f:t"
        fi
        link $f $XDG_CONFIG_HOME/$f:t
    done

    makedir $XDG_CACHE_HOME/zsh
    makedir $XDG_CACHE_HOME/direnv/allow

    # Fix the terminal definition so that C-H works properly in neovim.
    fixterm
}

# Upgrade Mac App Store packages
function dotfiles-mas {
    if (( ! $+commands[mas] )); then
        if [[ $INSTALL == 0 ]]; then
            warn "mas not installed"
            return
        fi

        brew install mas
    fi

    log "Upgrading Mac App Store apps..."
    mas upgrade
}

# Link and activate launchd scripts
function dotfiles-launchd {
    log "Linking and bootstrapping launchd scripts..."

    for f in $DOTFILES/launchd/*; do
        if [[ ! -h $HOME/Library/LaunchAgents/$f:t ]]; then
            link $f $HOME/Library/LaunchAgents/$f:t
            launchctl bootstrap gui/$UID $HOME/Library/LaunchAgents/$f:t
            logSub "Bootstrapped $f:t"
        fi
    done
}

# Install or update rust
function dotfiles-rust {
    if (( ! $+commands[rustup] )); then
        if [[ $INSTALL == 0 ]]; then
            warn "Rust not installed"
            return
        fi

        log "Installing rust..."
        curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y --no-modify-path
    else
        log "Updating rust..."
        rustup update
    fi
}

# Install homebrew and core packages, update brew packages
function dotfiles-brew {
    if [[ ! -x $BREW ]]; then
        if [[ $INSTALL == 0 ]]; then
            warn "Homebrew not installed"
            return
        fi

        logSub "Installing Homebrew..."

        if [[ $OSTYPE == linux* ]]; then
            if ! id linuxbrew > /dev/null 2>&1; then
                sudo adduser --disabled-password --gecos "" linuxbrew
            fi

            sudo -u linuxbrew NONINTERACTIVE=1 /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
            sudo apt install build-essential

	    sudo chmod a+rx /home/linuxbrew
	    sudo chmod -R o=u-w $HOMEBREW_BASE
        else
            NONINTERACTIVE=1 /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
        fi

        rehash
    fi

    # Install some missing or newer core packages from brew
    logSub "Installing/updating core packages..."
    brew_packages=(
        'bat'        # better cat
        'eza'        # better ls
        'fd'         # file finder
        'ripgrep'    # better grep
        'zoxide'     # better cd
        'mise'       # tool version manager
        'tig'        # terminal git ui
        'neovim'     # editor
    )

    if [[ $OSTYPE == darwin* ]]; then
        brew_packages=(
            $brew_packages
            '1password-cli'
        )
    fi

    if [[ $OSTYPE == linux* ]]; then
        sudo -u linuxbrew bash -c "cd && $BREW install -q ${brew_packages}"
    else
        $BREW install -q ${brew_packages[@]} 
    fi

    # Let the shell know about any newly installed packages
    rehash

    logSub "Updating installed brew packages..."
    if [[ $OSTYPE == linux* ]]; then
        sudo -u linuxbrew bash -c "cd && $BREW upgrade"
    else
        $BREW upgrade
    fi

    # Remove git's included zsh completions in favor of the system completions
    if [[ -f $HOMEBREW_BASE/share/zsh/site-functions/_git ]]; then
        hb_owner=$(owner $HOMEBREW_BASE)
        if [[ $hb_owner == $USER ]]; then
            rm -f $HOMEBREW_BASE/share/zsh/site-functions/_git
        else
            sudo rm -f $HOMEBREW_BASE/share/zsh/site-functions/_git
        fi
    fi
}

# Update neovim plugins
function dotfiles-nvim {
    if (( ! $+commands[nvim] )); then
        if [[ $INSTALL == 0 ]]; then
            warn "Neovim not installed"
            return
        fi

        brew install neovim
    fi
       
    log "Updating neovim resources..."

    logSub "Updating plugins..."
    nvim --headless "+Lazy! sync" +qa

    logSub "Updating language servers..."
    nvim --headless -c "autocmd User MasonUpgradeComplete qall" -c 'MasonUpgrade'

    logSub "Updating treesitter parsers..."
    nvim --headless -c 'TSUpdateSync | lua print("\n") io.flush()' +qa
}

# Update zsh plugins
function dotfiles-zsh {
    log "Updating zsh plugins..."

    if [[ -z $ZPLUGDIR ]]; then
        err "ZPLUGDIR not defined"
        return
    fi

    local out=""
    local head=""

    for plugin in $ZPLUGDIR/*/*; do
        head=$(git -C $plugin rev-parse HEAD)
        out=$(git -C $plugin pull -q --recurse-submodules 2>&1)
        if (( $? )); then
            err "Error updating ${plugin}"
            err $out
            continue
        fi
        out=$(git -C $plugin submodule update --remote 2>& 1)
        if (( $? )); then
            err "Error updating ${plugin}"
            err $out
            continue
        fi
        if [[ $(git -C $plugin rev-parse HEAD) != $head ]]; then 
            logSub "Updated ${plugin:h:t}/${plugin:t}"
        fi
    done

    log "Updating shell completions..."

    if (( $+commands[op] )); then
        op completion zsh >! $ZDATADIR/functions/_op
    fi

    if (( $+commands[mise] )); then
        mise complete --shell zsh >! $ZDATADIR/functions/_mise
    fi

    if (( $+commands[orb] )); then
        orb completion zsh >! $ZDATADIR/functions/_orb
    fi
}

# Update global npm packages
function dotfiles-node {
    log "Updating node..."

    if (( ! $+commands[npm] )); then
        if [[ $INSTALL == 0 ]]; then
            warn "Node not installed"
            return
        fi

        brew install node
    fi

    logSub "Updating package managers..."

    if (( $+commands[pnpm] )); then
        pnpm self-update
    fi

    logSub "Updating global node packages..."

    # get list of outdated global packages
    local mods=($(npm --registry=https://registry.npmjs.org outdated -g --parseable))
    for mod in $mods; do
        # extract current and latest fields
        array=(${(@s/:/)mod})
        currentPkg=$array[3]
        latestPkg=$array[4]

        # extract current and latest versions, minus any prerelease tags
        currentVerParts=(${(@s/@/)currentPkg})
        currentVer=$currentVerParts[2]
        latestVerParts=(${(@s/@/)latestPkg})
        latestVer=$latestVerParts[2]

        if [[ $latestVer == 'linked' ]]; then
            logSub "Skipping $latestPkg"
            continue
        fi

        # read versions into arrays
        current=(${(@s/./)currentVer})
        latest=(${(@s/./)latestVer})

        # if latest is newer than current, install latest
        if (( latest[1] > current[1] )) || {
            (( latest[1] == current[1] )) &&
            (( latest[2] > current[2] )) || {
                (( latest[1] == current[1] )) &&
                (( latest[2] == current[2] )) &&
                (( latest[3] > current[3] ));
            };
        }; then
            local npm=$(which npm)
            $npm install \
                --registry=https://registry.npmjs.org \
                --progress=false \
                -g \
                $latestPkg \
                --no-ignore-scripts > /dev/null
            logSub "Installed $latestPkg"
        fi
    done
}

cd $HOME

while (( $# > 0 )); do
    case $1 in
        -h | --help)
            echo 'usage: dotfiles [options] [group]'
            echo
            echo 'Update local environment. All groups are updated by default.'
            echo
            echo 'Options:'
            echo '    -h, --help     Show this help message'
            echo '    -i, --install  Install missing things'
            echo '    <group>        A group to update'
            echo
            echo 'Available groups:'
            echo '    bat            Rebuild bat theme and filetype cache'
            echo '    brew           Update all installed homebrew packages'
            echo '    fish           Update fish plugins and configure fish'
            echo '    home           Update dotfiles and home directories, fixup terminfo database'
            echo '    init           Install brew and core packages'
            echo '    launchd        Link and bootstrap launchd scripts'
            echo '    node           Update global node packages, install defaults'
            echo '    rust           Update rust install'
            echo '    vim            Update vim plugins'
            echo '    zsh            Update zsh plugins'
            exit 1
            ;;
        -i | --install)
            INSTALL=1
            ;;
        -*)
            echo "Unknown option $1"
            exit 1
            ;;
        *)
            GROUP=$1
            log "Done"
            ;;
    esac

    shift
done

if [[ -n $GROUP ]]; then
    dotfiles-$GROUP
else
    dotfiles-home
    dotfiles-brew
    dotfiles-node
    dotfiles-rust
    dotfiles-bat
    dotfiles-fish

    if [[ $OSTYPE == darwin* ]]; then
        dotfiles-launchd
        dotfiles-mas
    fi
fi

log "Done"
