#!/usr/bin/env swift

// Based on dark-mode-notifier from
// https://github.com/mnewt/dotemacs

import Cocoa

@discardableResult
func shell(_ args: String...) -> Int32 {
  let task = Process()
  task.launchPath = "/usr/bin/env"
  task.arguments = args
  task.launch()
  task.waitUntilExit()
  return task.terminationStatus
}

let wmDefaults = UserDefaults.init(suiteName: "com.apple.WindowManager")!

let env = ProcessInfo.processInfo.environment
let home = env["HOME"] ?? ""

class Observer: NSObject {
  func checkStatus() {
    let isEnabled = wmDefaults.bool(forKey: "GloballyEnabled")
    print("is enabled? \(String(describing: isEnabled))")
  }

  override func observeValue(
    forKeyPath keyPath: String?,
    of object: Any?,
    change: [NSKeyValueChangeKey: Any]?,
    context: UnsafeMutableRawPointer?
  ) {
    checkStatus()
    shell("touch", "\(home)/.config/wezterm/wezterm.lua")
  }
}

let observer = Observer()

observer.checkStatus()

wmDefaults.addObserver(
  observer,
  forKeyPath: "GloballyEnabled",
  options: .new,
  context: nil
)

let sigintSrc = DispatchSource.makeSignalSource(signal: SIGINT, queue: .main)
sigintSrc.setEventHandler {
  Swift.print("")
  exit(0)
}
sigintSrc.resume()

NSApplication.shared.run()
